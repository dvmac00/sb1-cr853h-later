/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap2() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap2(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.VERSION = require_data().version;
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// main.ts
__export(exports, {
  default: () => AIPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/embeddings.ts
var EmbeddingManager = class {
  constructor(vault, modelManager, databaseManager, cacheExpiration) {
    this.vault = vault;
    this.modelManager = modelManager;
    this.databaseManager = databaseManager;
    this.cacheExpiration = cacheExpiration;
  }
  async generateEmbedding(text) {
    return this.modelManager.generateEmbedding(text);
  }
  async generateEmbeddingsForFile(file) {
    const content = await this.vault.read(file);
    const chunks = this.chunkContent(content);
    const embeddings = [];
    for (let i = 0; i < chunks.length; i++) {
      const vector = await this.generateEmbedding(chunks[i]);
      embeddings.push({
        id: `${file.path}-${i}`,
        vector,
        file: file.path,
        chunk: chunks[i],
        timestamp: Date.now()
      });
    }
    await this.databaseManager.storeEmbeddings(embeddings);
    return embeddings;
  }
  async getEmbeddingsForFile(file) {
    const storedEmbeddings = await this.databaseManager.getEmbeddingsForFile(file.path);
    if (storedEmbeddings.length > 0 && this.isEmbeddingValid(storedEmbeddings[0])) {
      return storedEmbeddings;
    }
    return this.generateEmbeddingsForFile(file);
  }
  chunkContent(content) {
    return content.split("\n\n").filter((chunk) => chunk.trim() !== "");
  }
  isEmbeddingValid(embedding) {
    return Date.now() - embedding.timestamp < this.cacheExpiration;
  }
};

// node_modules/idb/build/index.js
var instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);
var idbProxyableTypes;
var cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var transactionDoneMap = new WeakMap();
var transformCache = new WeakMap();
var reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
  const promise = new Promise((resolve, reject) => {
    const unlisten = () => {
      request.removeEventListener("success", success);
      request.removeEventListener("error", error);
    };
    const success = () => {
      resolve(wrap(request.result));
      unlisten();
    };
    const error = () => {
      reject(request.error);
      unlisten();
    };
    request.addEventListener("success", success);
    request.addEventListener("error", error);
  });
  reverseTransformCache.set(promise, request);
  return promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  const done = new Promise((resolve, reject) => {
    const unlisten = () => {
      tx.removeEventListener("complete", complete);
      tx.removeEventListener("error", error);
      tx.removeEventListener("abort", error);
    };
    const complete = () => {
      resolve();
      unlisten();
    };
    const error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError"));
      unlisten();
    };
    tx.addEventListener("complete", complete);
    tx.addEventListener("error", error);
    tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "store") {
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    }
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    target[prop] = value;
    return true;
  },
  has(target, prop) {
    if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
      return true;
    }
    return prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  if (getCursorAdvanceMethods().includes(func)) {
    return function(...args) {
      func.apply(unwrap(this), args);
      return wrap(this.request);
    };
  }
  return function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  if (typeof value === "function")
    return wrapFunction(value);
  if (value instanceof IDBTransaction)
    cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes()))
    return new Proxy(value, idbProxyTraps);
  return value;
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  const newValue = transformCachableValue(value);
  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }
  return newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);
function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
  const request = indexedDB.open(name, version);
  const openPromise = wrap(request);
  if (upgrade) {
    request.addEventListener("upgradeneeded", (event) => {
      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
    });
  }
  if (blocked) {
    request.addEventListener("blocked", (event) => blocked(event.oldVersion, event.newVersion, event));
  }
  openPromise.then((db) => {
    if (terminated)
      db.addEventListener("close", () => terminated());
    if (blocking) {
      db.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
    }
  }).catch(() => {
  });
  return openPromise;
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
var writeMethods = ["put", "add", "delete", "clear"];
var cachedMethods = new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
    return;
  }
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  const targetFuncName = prop.replace(/FromIndex$/, "");
  const useIndex = prop !== targetFuncName;
  const isWrite = writeMethods.includes(targetFuncName);
  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {
    return;
  }
  const method = async function(storeName, ...args) {
    const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
    let target2 = tx.store;
    if (useIndex)
      target2 = target2.index(args.shift());
    return (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  cachedMethods.set(prop, method);
  return method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));
var advanceMethodProps = ["continue", "continuePrimaryKey", "advance"];
var methodMap = {};
var advanceResults = new WeakMap();
var ittrProxiedCursorToOriginalProxy = new WeakMap();
var cursorIteratorTraps = {
  get(target, prop) {
    if (!advanceMethodProps.includes(prop))
      return target[prop];
    let cachedFunc = methodMap[prop];
    if (!cachedFunc) {
      cachedFunc = methodMap[prop] = function(...args) {
        advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));
      };
    }
    return cachedFunc;
  }
};
async function* iterate(...args) {
  let cursor = this;
  if (!(cursor instanceof IDBCursor)) {
    cursor = await cursor.openCursor(...args);
  }
  if (!cursor)
    return;
  cursor = cursor;
  const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);
  ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);
  reverseTransformCache.set(proxiedCursor, unwrap(cursor));
  while (cursor) {
    yield proxiedCursor;
    cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());
    advanceResults.delete(proxiedCursor);
  }
}
function isIteratorProp(target, prop) {
  return prop === Symbol.asyncIterator && instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor]) || prop === "iterate" && instanceOfAny(target, [IDBIndex, IDBObjectStore]);
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get(target, prop, receiver) {
    if (isIteratorProp(target, prop))
      return iterate;
    return oldTraps.get(target, prop, receiver);
  },
  has(target, prop) {
    return isIteratorProp(target, prop) || oldTraps.has(target, prop);
  }
}));

// src/db.ts
var DatabaseManager = class {
  async init() {
    this.db = await openDB("ai-plugin-db", 1, {
      upgrade(db) {
        const embeddingsStore = db.createObjectStore("embeddings", { keyPath: "id" });
        embeddingsStore.createIndex("by-file", "file");
        embeddingsStore.createIndex("by-chunk", ["file", "chunk"]);
      }
    });
  }
  async storeEmbeddings(embeddings) {
    const tx = this.db.transaction("embeddings", "readwrite");
    for (const embedding of embeddings) {
      await tx.store.put(embedding);
    }
    await tx.done;
  }
  async getEmbeddingsForFile(file) {
    return this.db.getAllFromIndex("embeddings", "by-file", file);
  }
  async getEmbeddingForChunk(file, chunk) {
    return this.db.getFromIndex("embeddings", "by-chunk", [file, chunk]);
  }
  async getAllEmbeddings() {
    return this.db.getAll("embeddings");
  }
  async deleteEmbeddingsForFile(file) {
    const tx = this.db.transaction("embeddings", "readwrite");
    const index = tx.store.index("by-file");
    let cursor = await index.openCursor(file);
    while (cursor) {
      await cursor.delete();
      cursor = await cursor.continue();
    }
    await tx.done;
  }
};

// src/atomizer.ts
var Atomizer = class {
  constructor(vault, modelManager) {
    this.vault = vault;
    this.modelManager = modelManager;
  }
  async atomizeNote(file) {
    const content = await this.vault.read(file);
    const concepts = await this.identifyKeyConcepts(content);
    const atomicNotes = [];
    for (const concept of concepts) {
      const atomicNote = await this.generateAtomicNote(concept, content);
      atomicNotes.push(atomicNote);
    }
    return atomicNotes;
  }
  async identifyKeyConcepts(content) {
    const prompt = `Identify key concepts in the following text. Return the concepts as a JSON array of strings:

${content}`;
    const response = await this.modelManager.generateText(prompt);
    return JSON.parse(response);
  }
  async generateAtomicNote(concept, sourceContent) {
    const prompt = `Generate an atomic note about "${concept}" based on the following source content. Return the result as a JSON object with "title" and "content" fields. The content should include a reference back to the original note:

${sourceContent}`;
    const response = await this.modelManager.generateText(prompt);
    return JSON.parse(response);
  }
};

// src/titleSuggester.ts
var TitleSuggester = class {
  constructor(app, modelManager, vaultQuerier) {
    this.app = app;
    this.modelManager = modelManager;
    this.vaultQuerier = vaultQuerier;
  }
  async suggestTitle(file) {
    const content = await this.app.vault.read(file);
    const similarNotes = await this.findSimilarNotes(file);
    const prompt = `Suggest a title for the following note content. Consider these similar note titles for context: ${similarNotes.join(", ")}. Return only the suggested title as plain text:

${content}`;
    return this.modelManager.generateText(prompt);
  }
  async findSimilarNotes(file) {
    const content = await this.app.vault.read(file);
    const similarNotes = await this.vaultQuerier.queryVault(content, 5);
    return similarNotes.map((result) => result.file.basename);
  }
};

// src/vaultQuerier.ts
var VaultQuerier = class {
  constructor(vault, embeddingManager, databaseManager) {
    this.vault = vault;
    this.embeddingManager = embeddingManager;
    this.databaseManager = databaseManager;
  }
  async queryVault(query, topK = 5) {
    const queryEmbedding = await this.embeddingManager.generateEmbedding(query);
    const allEmbeddings = await this.databaseManager.getAllEmbeddings();
    const results = allEmbeddings.map((embedding) => ({
      file: this.vault.getAbstractFileByPath(embedding.file),
      similarity: this.cosineSimilarity(queryEmbedding, embedding.vector)
    }));
    results.sort((a, b) => b.similarity - a.similarity);
    return results.slice(0, topK);
  }
  cosineSimilarity(vec1, vec2) {
    const dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);
    const mag1 = Math.sqrt(vec1.reduce((sum, val) => sum + val * val, 0));
    const mag2 = Math.sqrt(vec2.reduce((sum, val) => sum + val * val, 0));
    return dotProduct / (mag1 * mag2);
  }
};

// src/nlpManager.ts
var NLPManager = class {
  constructor(modelManager) {
    this.modelManager = modelManager;
  }
  async performTask(task, text) {
    const prompt = `Perform the following NLP task: ${task}

Text: ${text}

Result:`;
    return this.modelManager.generateText(prompt);
  }
};

// src/modelManager.ts
var import_axios = __toModule(require_axios2());
var ModelProvider;
(function(ModelProvider2) {
  ModelProvider2["Ollama"] = "ollama";
  ModelProvider2["OpenAI"] = "openai";
})(ModelProvider || (ModelProvider = {}));
var ModelManager = class {
  constructor(provider, model, endpoint) {
    this.provider = provider;
    this.model = model;
    this.endpoint = endpoint;
  }
  setProvider(provider) {
    this.provider = provider;
  }
  setModel(model) {
    this.model = model;
  }
  setEndpoint(endpoint) {
    this.endpoint = endpoint;
  }
  getAvailableModels() {
    switch (this.provider) {
      case ModelProvider.Ollama:
        return ["llama2", "gpt4all", "bloom"];
      case ModelProvider.OpenAI:
        return ["gpt-3.5-turbo", "gpt-4"];
      default:
        return [];
    }
  }
  async generateEmbedding(text) {
    switch (this.provider) {
      case ModelProvider.Ollama:
        return this.generateOllamaEmbedding(text);
      case ModelProvider.OpenAI:
        return this.generateOpenAIEmbedding(text);
      default:
        throw new Error("Unsupported model provider");
    }
  }
  async generateText(prompt) {
    switch (this.provider) {
      case ModelProvider.Ollama:
        return this.generateOllamaText(prompt);
      case ModelProvider.OpenAI:
        return this.generateOpenAIText(prompt);
      default:
        throw new Error("Unsupported model provider");
    }
  }
  async generateOllamaEmbedding(text) {
    try {
      const response = await import_axios.default.post(`${this.endpoint}/api/embeddings`, {
        model: this.model,
        prompt: text
      });
      return response.data.embedding;
    } catch (error) {
      console.error("Failed to generate Ollama embedding:", error);
      throw error;
    }
  }
  async generateOpenAIEmbedding(text) {
    try {
      const response = await import_axios.default.post("https://api.openai.com/v1/embeddings", {
        model: "text-embedding-ada-002",
        input: text
      }, {
        headers: {
          "Authorization": `Bearer ${this.endpoint}`,
          "Content-Type": "application/json"
        }
      });
      return response.data.data[0].embedding;
    } catch (error) {
      console.error("Failed to generate OpenAI embedding:", error);
      throw error;
    }
  }
  async generateOllamaText(prompt) {
    try {
      const response = await import_axios.default.post(`${this.endpoint}/api/generate`, {
        model: this.model,
        prompt
      });
      return response.data.response.trim();
    } catch (error) {
      console.error("Failed to generate Ollama text:", error);
      throw error;
    }
  }
  async generateOpenAIText(prompt) {
    try {
      const response = await import_axios.default.post("https://api.openai.com/v1/chat/completions", {
        model: this.model,
        messages: [{ role: "user", content: prompt }]
      }, {
        headers: {
          "Authorization": `Bearer ${this.endpoint}`,
          "Content-Type": "application/json"
        }
      });
      return response.data.choices[0].message.content.trim();
    } catch (error) {
      console.error("Failed to generate OpenAI text:", error);
      throw error;
    }
  }
};

// src/textCleaner.ts
var TextCleaner = class {
  constructor(modelManager) {
    this.modelManager = modelManager;
  }
  async cleanText(text) {
    const prompt = `Please clean and improve the following text. Fix any grammatical errors, improve clarity and conciseness, and ensure proper formatting. Return only the cleaned text without any additional comments:

${text}`;
    try {
      const cleanedText = await this.modelManager.generateText(prompt);
      return cleanedText;
    } catch (error) {
      console.error("Error cleaning text:", error);
      throw new Error("Failed to clean text");
    }
  }
};

// src/tagSuggester.ts
var TagSuggester = class {
  constructor(modelManager) {
    this.modelManager = modelManager;
  }
  async suggestTags(file, content) {
    const prompt = `Suggest relevant tags for the following note content. Return the tags as a JSON array of strings, without any symbols:

${content}`;
    try {
      const response = await this.modelManager.generateText(prompt);
      const suggestedTags = JSON.parse(response);
      return Array.isArray(suggestedTags) ? suggestedTags : [];
    } catch (error) {
      console.error("Error suggesting tags:", error);
      throw new Error("Failed to suggest tags");
    }
  }
};

// src/notePathManager.ts
var NotePathManager = class {
  constructor(vault, rules) {
    this.vault = vault;
    this.rules = rules;
  }
  async getSuggestedPath(file) {
    const content = await this.vault.read(file);
    for (const rule of this.rules) {
      if (this.matchesCriteria(content, rule.criteria)) {
        return rule.targetPath;
      }
    }
    return null;
  }
  async checkAndMoveNote(file) {
    const suggestedPath = await this.getSuggestedPath(file);
    if (suggestedPath && file.path !== suggestedPath) {
      await this.moveNote(file, suggestedPath);
    }
  }
  async moveNote(file, newPath) {
    try {
      await this.vault.rename(file, newPath);
    } catch (error) {
      console.error("Failed to move note:", error);
      throw new Error("Failed to move note");
    }
  }
  matchesCriteria(content, criteria) {
    return content.includes(criteria);
  }
};

// src/aiChat.ts
var import_obsidian = __toModule(require("obsidian"));
var AIChat = class {
  constructor(app, modelManager) {
    this.app = app;
    this.modelManager = modelManager;
  }
  openChatWindow() {
    const modal = new AIChatModal(this.app, this.modelManager);
    modal.open();
  }
};
var AIChatModal = class extends import_obsidian.Modal {
  constructor(app, modelManager) {
    super(app);
    this.messages = [];
    this.modelManager = modelManager;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("ai-plugin-modal");
    contentEl.createEl("h2", { text: "AI Chat" });
    this.chatEl = contentEl.createDiv("ai-plugin-chat");
    this.inputEl = contentEl.createEl("textarea", { cls: "ai-plugin-input" });
    new import_obsidian.Setting(contentEl).addButton((button) => button.setButtonText("Send").addClass("ai-plugin-button").onClick(() => this.sendMessage()));
  }
  async sendMessage() {
    const userMessage = this.inputEl.value.trim();
    if (!userMessage)
      return;
    this.addMessageToChat("user", userMessage);
    this.inputEl.value = "";
    this.messages.push({ role: "user", content: userMessage });
    try {
      const response = await this.modelManager.generateText(this.formatPrompt());
      this.addMessageToChat("assistant", response);
      this.messages.push({ role: "assistant", content: response });
    } catch (error) {
      console.error("Error generating response:", error);
      this.addMessageToChat("assistant", "Sorry, I encountered an error while processing your request.");
    }
  }
  addMessageToChat(role, content) {
    const messageEl = this.chatEl.createDiv("ai-plugin-chat-message");
    messageEl.addClass(role);
    const roleEl = messageEl.createDiv("chat-role");
    roleEl.textContent = role === "user" ? "You:" : "AI:";
    const contentEl = messageEl.createDiv("chat-content");
    contentEl.textContent = content;
    this.chatEl.scrollTop = this.chatEl.scrollHeight;
  }
  formatPrompt() {
    return this.messages.map((msg) => `${msg.role}: ${msg.content}`).join("\n");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  ollamaEndpoint: "http://localhost:11434",
  cacheExpiration: 24 * 60 * 60 * 1e3,
  selectedModel: "llama2",
  selectedProvider: ModelProvider.Ollama,
  notePathRules: []
};
var AIPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.modelManager = new ModelManager(this.settings.selectedProvider, this.settings.selectedModel, this.settings.ollamaEndpoint);
    this.databaseManager = new DatabaseManager();
    await this.databaseManager.init();
    this.embeddingManager = new EmbeddingManager(this.app.vault, this.modelManager, this.databaseManager, this.settings.cacheExpiration);
    this.atomizer = new Atomizer(this.app.vault, this.modelManager);
    this.vaultQuerier = new VaultQuerier(this.app.vault, this.embeddingManager, this.databaseManager);
    this.titleSuggester = new TitleSuggester(this.app, this.modelManager, this.vaultQuerier);
    this.nlpManager = new NLPManager(this.modelManager);
    this.textCleaner = new TextCleaner(this.modelManager);
    this.tagSuggester = new TagSuggester(this.modelManager);
    this.notePathManager = new NotePathManager(this.app.vault, this.settings.notePathRules);
    this.aiChat = new AIChat(this.app, this.modelManager);
    this.addSettingTab(new AIPluginSettingTab(this.app, this));
    this.addRibbonIcon("message-square", "AI Chat", () => {
      this.aiChat.openChatWindow();
    });
    this.addCommand({
      id: "suggest-and-move-note",
      name: "Suggest and Move Note",
      callback: () => this.suggestAndMoveNote()
    });
    this.addCommand({
      id: "atomize-note",
      name: "Atomize Current Note",
      callback: () => this.atomizeCurrentNote()
    });
    this.addCommand({
      id: "suggest-title",
      name: "Suggest Title for Current Note",
      callback: () => this.suggestTitleForCurrentNote()
    });
    this.addCommand({
      id: "clean-text",
      name: "Clean Text of Current Note",
      callback: () => this.cleanTextOfCurrentNote()
    });
    this.addCommand({
      id: "suggest-tags",
      name: "Suggest Tags for Current Note",
      callback: () => this.suggestTagsForCurrentNote()
    });
    this.addCommand({
      id: "open-ai-chat",
      name: "Open AI Chat",
      callback: () => this.aiChat.openChatWindow()
    });
    this.registerEvent(this.app.vault.on("modify", (file) => {
      this.updateEmbeddingsForFile(file);
      this.notePathManager.checkAndMoveNote(file);
    }));
  }
  async suggestAndMoveNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("No active file");
      return;
    }
    const suggestedPath = await this.notePathManager.getSuggestedPath(activeFile);
    if (suggestedPath) {
      const modal = new SuggestMoveNoteModal(this.app, activeFile, suggestedPath, async () => {
        await this.notePathManager.moveNote(activeFile, suggestedPath);
        new import_obsidian2.Notice(`Moved note to ${suggestedPath}`);
      });
      modal.open();
    } else {
      new import_obsidian2.Notice("No suggested path for this note");
    }
  }
  async atomizeCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("No active file");
      return;
    }
    try {
      const atomicNotes = await this.atomizer.atomizeNote(activeFile);
      for (const note of atomicNotes) {
        await this.app.vault.create(`${note.title}.md`, note.content);
      }
      new import_obsidian2.Notice(`Created ${atomicNotes.length} atomic notes`);
    } catch (error) {
      console.error("Error atomizing note:", error);
      new import_obsidian2.Notice("Failed to atomize note");
    }
  }
  async suggestTitleForCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("No active file");
      return;
    }
    try {
      const suggestedTitle = await this.titleSuggester.suggestTitle(activeFile);
      const modal = new SuggestTitleModal(this.app, activeFile, suggestedTitle, async (newTitle) => {
        await this.app.fileManager.renameFile(activeFile, `${newTitle}.md`);
        new import_obsidian2.Notice(`Renamed note to "${newTitle}"`);
      });
      modal.open();
    } catch (error) {
      console.error("Error suggesting title:", error);
      new import_obsidian2.Notice("Failed to suggest title");
    }
  }
  async cleanTextOfCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("No active file");
      return;
    }
    try {
      const content = await this.app.vault.read(activeFile);
      const cleanedText = await this.textCleaner.cleanText(content);
      await this.app.vault.modify(activeFile, cleanedText);
      new import_obsidian2.Notice("Text cleaned successfully");
    } catch (error) {
      console.error("Error cleaning text:", error);
      new import_obsidian2.Notice("Failed to clean text");
    }
  }
  async suggestTagsForCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("No active file");
      return;
    }
    try {
      const content = await this.app.vault.read(activeFile);
      const suggestedTags = await this.tagSuggester.suggestTags(activeFile, content);
      const modal = new SuggestTagsModal(this.app, activeFile, suggestedTags, async (selectedTags) => {
        await this.addTagsToNote(activeFile, selectedTags);
        new import_obsidian2.Notice(`Added ${selectedTags.length} tags to the note`);
      });
      modal.open();
    } catch (error) {
      console.error("Error suggesting tags:", error);
      new import_obsidian2.Notice("Failed to suggest tags");
    }
  }
  async addTagsToNote(file, tags) {
    var _a;
    const content = await this.app.vault.read(file);
    const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    let newContent = content;
    if (frontmatter) {
      const existingTags = frontmatter.tags || [];
      const updatedTags = [...new Set([...existingTags, ...tags])];
      const updatedFrontmatter = { ...frontmatter, tags: updatedTags };
      newContent = content.replace(/^---\n[\s\S]*?\n---\n/, `---
${JSON.stringify(updatedFrontmatter, null, 2)}
---
`);
    } else {
      const newFrontmatter = { tags };
      newContent = `---
${JSON.stringify(newFrontmatter, null, 2)}
---
${content}`;
    }
    await this.app.vault.modify(file, newContent);
  }
  async updateEmbeddingsForFile(file) {
    try {
      await this.embeddingManager.generateEmbeddingsForFile(file);
    } catch (error) {
      console.error("Error updating embeddings:", error);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var AIPluginSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("ai-plugin-settings");
    containerEl.createEl("h2", { text: "AI Plugin Settings" });
    new import_obsidian2.Setting(containerEl).setName("Ollama Endpoint").setDesc("The URL of your Ollama server").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.ollamaEndpoint).onChange(async (value) => {
      this.plugin.settings.ollamaEndpoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Cache Expiration").setDesc("Time in milliseconds before embeddings are regenerated").addText((text) => text.setPlaceholder("86400000").setValue(String(this.plugin.settings.cacheExpiration)).onChange(async (value) => {
      const numValue = Number(value);
      if (!isNaN(numValue)) {
        this.plugin.settings.cacheExpiration = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("Model Provider").setDesc("Select the AI model provider").addDropdown((dropdown) => dropdown.addOption(ModelProvider.Ollama, "Ollama").addOption(ModelProvider.OpenAI, "OpenAI").setValue(this.plugin.settings.selectedProvider).onChange(async (value) => {
      this.plugin.settings.selectedProvider = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian2.Setting(containerEl).setName("Selected Model").setDesc("Choose the AI model to use").addDropdown((dropdown) => {
      const models = this.plugin.modelManager.getAvailableModels();
      models.forEach((model) => dropdown.addOption(model, model));
      dropdown.setValue(this.plugin.settings.selectedModel).onChange(async (value) => {
        this.plugin.settings.selectedModel = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Note Path Rules").setDesc("Configure rules for automatically moving notes based on criteria").addButton((button) => button.setButtonText("Add Rule").onClick(() => {
      this.plugin.settings.notePathRules.push({ criteria: "", targetPath: "" });
      this.plugin.saveSettings();
      this.display();
    }));
    this.plugin.settings.notePathRules.forEach((rule, index) => {
      const ruleContainer = containerEl.createDiv();
      new import_obsidian2.Setting(ruleContainer).setName(`Rule ${index + 1}`).addText((text) => text.setPlaceholder("Criteria (e.g., #project)").setValue(rule.criteria).onChange(async (value) => {
        this.plugin.settings.notePathRules[index].criteria = value;
        await this.plugin.saveSettings();
      })).addText((text) => text.setPlaceholder("Target Path").setValue(rule.targetPath).onChange(async (value) => {
        this.plugin.settings.notePathRules[index].targetPath = value;
        await this.plugin.saveSettings();
      })).addButton((button) => button.setButtonText("Remove").onClick(async () => {
        this.plugin.settings.notePathRules.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      }));
    });
  }
};
var SuggestMoveNoteModal = class extends import_obsidian2.Modal {
  constructor(app, file, suggestedPath, onMove) {
    super(app);
    this.file = file;
    this.suggestedPath = suggestedPath;
    this.onMove = onMove;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("ai-plugin-modal");
    contentEl.setText(`Move "${this.file.name}" to "${this.suggestedPath}"?`);
    new import_obsidian2.Setting(contentEl).addButton((button) => button.setButtonText("Move").addClass("ai-plugin-button").onClick(() => {
      this.onMove();
      this.close();
    })).addButton((button) => button.setButtonText("Cancel").addClass("ai-plugin-button").onClick(() => this.close()));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SuggestTitleModal = class extends import_obsidian2.Modal {
  constructor(app, file, suggestedTitle, onRename) {
    super(app);
    this.file = file;
    this.suggestedTitle = suggestedTitle;
    this.onRename = onRename;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("ai-plugin-modal");
    contentEl.createEl("h2", { text: "Suggest Title" });
    const titleInput = new import_obsidian2.TextComponent(contentEl).setValue(this.suggestedTitle).setPlaceholder("Enter title");
    new import_obsidian2.Setting(contentEl).addButton((button) => button.setButtonText("Rename").addClass("ai-plugin-button").onClick(() => {
      this.onRename(titleInput.getValue());
      this.close();
    })).addButton((button) => button.setButtonText("Cancel").addClass("ai-plugin-button").onClick(() => this.close()));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SuggestTagsModal = class extends import_obsidian2.Modal {
  constructor(app, file, suggestedTags, onApply) {
    super(app);
    this.file = file;
    this.suggestedTags = suggestedTags;
    this.onApply = onApply;
    this.selectedTags = [];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("ai-plugin-modal");
    contentEl.createEl("h2", { text: "Suggest Tags" });
    this.suggestedTags.forEach((tag) => {
      new import_obsidian2.Setting(contentEl).setName(tag).addToggle((toggle) => toggle.onChange((value) => {
        if (value) {
          this.selectedTags.push(tag);
        } else {
          this.selectedTags = this.selectedTags.filter((t) => t !== tag);
        }
      }));
    });
    new import_obsidian2.Setting(contentEl).addButton((button) => button.setButtonText("Apply Tags").addClass("ai-plugin-button").onClick(() => {
      this.onApply(this.selectedTags);
      this.close();
    })).addButton((button) => button.setButtonText("Cancel").addClass("ai-plugin-button").onClick(() => this.close()));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
